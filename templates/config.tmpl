<!DOCTYPE html>
<html lang="{{.UserConfig.LangCode}}">
{{template "head" returnHeadRender .AppTitle .PageTitle .UserConfig.LangCode .UserConfig.SystemTheme}}
<body>

{{template "loading" .UserConfig.LangCode}}
{{template "menus" .}}

<div id="container">

  <div id="control">
  <h1 i18n-text="config">{{.PageTitle}}</h1>
  <div id="resDisplay"><br></div>
  </div>

  <div id="main">

    <div id="user">
      <form id="configUser" action="/config" method="post">



        <h2 i18n-text="appearance">Appearance:</h2>
        <p><span class="ofname" i18n-text="systemTheme">System theme:</span> <select name="systemTheme" id="systemTheme" class="numberbox" 
          onchange="updateConfig();">
          {{range .Themes}}<option value="{{.}}">{{.}}</option>
          {{end}}
        </select><span class="dropdown"></span></p>

        <p><span class="ofname" i18n-text="elemsOnPage">Elements on page:</span> <select name="elemsOnPage" id="elemsOnPage" class="numberbox"
          onchange="updateConfig();">
          <option value="20">20</option>
          <option value="50">50</option>
          <option value="100">100</option>
          <option value="200">200</option>
          <option value="500">500</option>
        </select><span class="dropdown"></span></p>

        <p><span class="ofname" i18n-text="elemsOnTeamPage">Elements on team page:</span> <select name="elemsOnPageTeam" id="elemsOnPageTeam" class="numberbox"
          onchange="updateConfig();">
          <option value="20">20</option>
          <option value="50">50</option>
          <option value="100">100</option>
          <option value="200">200</option>
          <option value="500">500</option>
        </select><span class="dropdown"></span></p>

        <p><span class="ofname" i18n-text="dateFormat">Date format in tables:</span> <select name="dateFormat" id="dateFormat" class="numberbox"
          onchange="updateConfig();">
          {{range .DateFormats}}<option value="{{.}}">{{.}}</option>
          {{end}}
        </select><span class="dropdown"></span></p>

        <p><span class="ofname" i18n-text="timeFormat">Time format in tables:</span> <select name="timeFormat" id="timeFormat" class="numberbox"
          onchange="updateConfig();">
          {{range .TimeFormats}}<option value="{{.}}">{{.}}</option>
          {{end}}
        </select><span class="dropdown"></span></p>

        <p><span class="ofname" i18n-text="interfaceLang">Interface Language:</span> <select name="langCode" id="langCode" class="numberbox"
          onchange="updateConfig();">
          {{range .LangCodes}}<option value="{{.}}">{{.}}</option>
          {{end}}
        </select><span class="dropdown"></span></p>
        <script src="/static/i18n/codesui.js"></script>

        <p><label for="useCalendarInControls" class="ofname" i18n-title="useCalendarInControlsHint"
          title="If disabled, these inputs will become text fields." i18n-text="useCalendarInControls">Use calendar inputs for date and time:</label>
          <label class="switch"><input type="checkbox" class="hidden" 
          id="useCalendarInControls" name="useCalendarInControls" value="true"
          onchange="updateConfig();">
        <span class="slider"></span></label></p>

        <p><label for="currencyBeforeAmount" class="ofname" i18n-text="currencyBeforeAmount">Show currency before the amount:</label>
          <label class="switch"><input type="checkbox" class="hidden" 
          id="currencyBeforeAmount" name="currencyBeforeAmount" value="true"
          onchange="updateConfig();">
        <span class="slider"></span></label></p>



        <h2 i18n-text="functionality">Functionality:</h2>

        <p><label for="showFinishedTasks" class="ofname" i18n-text="showFinishedTasks">Show completed and canceled tasks with default filter:</label>
          <label class="switch"><input type="checkbox" class="hidden" 
          id="showFinishedTasks" name="showFinishedTasks" value="true"
          onchange="updateConfig();">
        <span class="slider"></span></label></p>

        <p><label for="returnAfterCreation" class="ofname" i18n-text="returnAfterCreation">Return to elements list page after element creation:</label>
          <label class="switch"><input type="checkbox" class="hidden" 
          id="returnAfterCreation" name="returnAfterCreation" value="true"
          onchange="updateConfig();">
        <span class="slider"></span></label></p>



        <br>
        <input type="hidden" name="updateButton" value="saveConfig">

      </form>
    </div>

  </div>

{{template "bottom" .AppVersion}}


</div>



<script>

  function updatePageView(config) {
    if (document.getElementById('systemTheme').value != getTheme()) {
      changeTheme(config.SystemTheme);
    }
    if (document.documentElement.lang != config.LangCode) {
      document.documentElement.setAttribute("lang", config.LangCode);
      getLang(config.LangCode).then(lang => translateAll(null, lang));
    }
    /* Appearance */
    document.getElementById('systemTheme').value = config.SystemTheme;
    document.getElementById('elemsOnPage').value = config.ElemsOnPage;
    document.getElementById('elemsOnPageTeam').value = config.ElemsOnPageTeam;
    document.getElementById('dateFormat').value = config.DateFormat;
    document.getElementById('timeFormat').value = config.TimeFormat;
    document.getElementById('langCode').value = config.LangCode;
    document.getElementById('useCalendarInControls').checked = config.UseCalendarInControls;
    document.getElementById('currencyBeforeAmount').checked = config.CurrencyBeforeAmount;
    /* Functionality */
    document.getElementById('showFinishedTasks').checked = config.ShowFinishedTasks;
    let taskLink = document.querySelector(`#textmenu a[href^='/tasks']`);
    if (taskLink && !config.ShowFinishedTasks) {
      taskLink.href = "/tasks/?anyparticipants=my&taskstatuses=0&taskstatuses=1&taskstatuses=2&taskstatuses=3&taskstatuses=6";
    } else if (taskLink) {
      taskLink.href = "/tasks/?anyparticipants=my";
    }
    document.getElementById('returnAfterCreation').checked = config.ReturnAfterCreation;
  }

  function updateConfig() {
    let reqObj = new FormData(document.getElementById('configUser'));
    makeDataRequest(reqObj, window.location.pathname, updatePageView, 'UserConfig');
  }

  /* Main page loading function */
  (function() {
    updatePageView({{.UserConfig}});
  })();

</script>

</body>
</html>
