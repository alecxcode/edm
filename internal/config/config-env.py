#!/usr/bin/python

# This generates code for OS env reading.
# Run go generate in project folder.


BIG = 1
SMALL = 2
OTHER = 3
useprefixes = ["DB", "REDIS", "SMTP"]


def getCase(letter):
    if ord(letter) >= 65 and ord(letter) <= 90:
        return BIG
    if ord(letter) >= 97 and ord(letter) <= 122:
        return SMALL
    return OTHER


def createFileContent():
    arrFields = []
    f = open("config.go", "r")
    reader = False
    for pos, line in enumerate(f):
        if reader == True and "}" in line:
            #reader = False
            break
        if reader:
            x = line.replace("string", "").strip()
            arrFields.append(x)
        if "type Config struct {" in line:
            reader = True

    cont = """package config

// Code generated by go generate; DO NOT EDIT.
// This file was generated with Python robot.

import "os"
"""

    cont +="""
func (cfg *Config) readOSEnv() {
"""

    for sf in arrFields:

        run = False
        for prefix in useprefixes:
            if sf.startswith(prefix):
                run = True

        if run:

            newsf = ''
            counter = 0
            prevord = getCase(sf[0])
            nextord = getCase(sf[0])
            for letter in sf:
                counter += 1
                currentord = getCase(letter)
                if len(sf) > counter:
                    nextord = getCase(sf[counter])
                if (currentord == BIG and nextord == SMALL) and counter > 1:
                    newsf += '_'
                elif (currentord == BIG and prevord == SMALL) and counter > 1:
                    newsf += '_'
                prevord = currentord
                newsf += letter

            cont += f'\tif v, ok := os.LookupEnv("EDM_{newsf.upper()}"); ok ' + '{\n'
            cont += f'\t\tcfg.{sf} = v\n' + '\t}\n'

    cont += "\n}\n"
    return cont


def genFile(fname, cont):
    f = open(fname, "w") #overwrites
    f.write(cont)
    f.close()


genFile("config-env.go", createFileContent())
print("config-env.go generated")
